
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.TypeItemScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CostCenterScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.KeyCountryScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ItemScalarFieldEnum = makeEnum({
  id: 'id',
  typeId: 'typeId',
  ccId: 'ccId',
  kcId: 'kcId',
  purchaseId: 'purchaseId',
  quantity: 'quantity',
  priceUnit: 'priceUnit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.VendorScalarFieldEnum = makeEnum({
  id: 'id',
  codeSap: 'codeSap',
  name: 'name',
  fiscalTaxId: 'fiscalTaxId',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PurchaseRequestScalarFieldEnum = makeEnum({
  id: 'id',
  requesterId: 'requesterId',
  type: 'type',
  delivery: 'delivery',
  description: 'description',
  totalContract: 'totalContract',
  startContract: 'startContract',
  endContract: 'endContract',
  vendorId: 'vendorId',
  observation: 'observation',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ApprovalScalarFieldEnum = makeEnum({
  approverId: 'approverId',
  status: 'status',
  purchaseId: 'purchaseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BankAccountScalarFieldEnum = makeEnum({
  vendorId: 'vendorId',
  codeBank: 'codeBank',
  branch: 'branch',
  account: 'account',
  digit: 'digit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CountryScalarFieldEnum = makeEnum({
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  vendorId: 'vendorId',
  addressType: 'addressType',
  street: 'street',
  streetNo: 'streetNo',
  complement: 'complement',
  zipCode: 'zipCode',
  block: 'block',
  cityId: 'cityId',
  stateId: 'stateId',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.RequestType = makeEnum({
  New: 'New',
  Renewal: 'Renewal',
  Adjustment: 'Adjustment',
  Termination: 'Termination'
});

exports.Condition = makeEnum({
  Recurrent: 'Recurrent',
  Spot: 'Spot'
});

exports.PurchaseStatus = makeEnum({
  Sent: 'Sent',
  Approved: 'Approved',
  Rejected: 'Rejected'
});

exports.Prisma.ModelName = makeEnum({
  TypeItem: 'TypeItem',
  CostCenter: 'CostCenter',
  KeyCountry: 'KeyCountry',
  Item: 'Item',
  User: 'User',
  Vendor: 'Vendor',
  PurchaseRequest: 'PurchaseRequest',
  Approval: 'Approval',
  BankAccount: 'BankAccount',
  City: 'City',
  State: 'State',
  Country: 'Country',
  Address: 'Address'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
